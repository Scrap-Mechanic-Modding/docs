"use strict";(self.webpackChunksm_docs=self.webpackChunksm_docs||[]).push([[776],{3905:(t,e,r)=>{r.d(e,{Zo:()=>m,kt:()=>g});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function o(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function l(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var c=n.createContext({}),p=function(t){var e=n.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):l(l({},e),t)),r},m=function(t){var e=p(t.components);return n.createElement(c.Provider,{value:e},t.children)},s="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,o=t.originalType,c=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),s=p(r),d=a,g=s["".concat(c,".").concat(d)]||s[d]||u[d]||o;return r?n.createElement(g,l(l({ref:e},m),{},{components:r})):n.createElement(g,l({ref:e},m))}));function g(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=r.length,l=new Array(o);l[0]=d;var i={};for(var c in e)hasOwnProperty.call(e,c)&&(i[c]=e[c]);i.originalType=t,i[s]="string"==typeof t?t:a,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1691:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={title:"Format"},l="Format",i={unversionedId:"networking/docs/protocol/format",id:"networking/docs/protocol/format",title:"Format",description:"Generic format for all packets",source:"@site/docs/networking/docs/protocol/format.mdx",sourceDirName:"networking/docs/protocol",slug:"/networking/docs/protocol/format",permalink:"/docs/networking/docs/protocol/format",draft:!1,editUrl:"https://pr.new/github.com/Scrap-Mechanic-Modding/Scrap-Mechanic-Modding.github.io/blob/main/docs/networking/docs/protocol/format.mdx",tags:[],version:"current",frontMatter:{title:"Format"},sidebar:"networkingSidebar",previous:{title:"Protocol",permalink:"/docs/category/protocol"}},c={},p=[{value:"Without compression",id:"without-compression",level:2},{value:"With compression",id:"with-compression",level:2}],m={toc:p},s="wrapper";function u(t){let{components:e,...r}=t;return(0,a.kt)(s,(0,n.Z)({},m,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"format"},"Format"),(0,a.kt)("p",null,"Generic format for all packets"),(0,a.kt)("h2",{id:"without-compression"},"Without compression"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Field Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Packet ID"),(0,a.kt)("td",{parentName:"tr",align:null},"Unsigned Byte"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Data"),(0,a.kt)("td",{parentName:"tr",align:null},"Variable"),(0,a.kt)("td",{parentName:"tr",align:null},"Size is retrieved through Steam's networking functions. Data can be any length including zero, depends on packet ID.")))),(0,a.kt)("h2",{id:"with-compression"},"With compression"),(0,a.kt)("p",null,"Compression algorithm is LZ4 (",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lz4/lz4"},"https://github.com/lz4/lz4"),"). When looking for LZ4 compressed blocks in memory - keep an eye out for the ",(0,a.kt)("inlineCode",{parentName:"p"},"0xF0")," byte marking the beginning. It won't always be there but it's really common"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Field Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Packet ID"),(0,a.kt)("td",{parentName:"tr",align:null},"Unsigned Byte"),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Data"),(0,a.kt)("td",{parentName:"tr",align:null},"Variable"),(0,a.kt)("td",{parentName:"tr",align:null},"Same as above but compressed using LZ4.")))))}u.isMDXComponent=!0}}]);