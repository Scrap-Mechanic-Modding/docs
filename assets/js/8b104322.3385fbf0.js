"use strict";(self.webpackChunksm_docs=self.webpackChunksm_docs||[]).push([[4326],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>k});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),s=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},c=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},m="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,p=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),m=s(n),d=a,k=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(k,o(o({ref:e},c),{},{components:n})):r.createElement(k,o({ref:e},c))}));function k(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l[m]="string"==typeof t?t:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3599:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const i={title:"45 - Lift Import Creation"},o="Lift Import Creation",l={unversionedId:"networking/packets/lift-import-creation",id:"networking/packets/lift-import-creation",title:"45 - Lift Import Creation",description:"This packet is sent when the player imports a creation from the lift.",source:"@site/docs/networking/packets/45-lift-import-creation.mdx",sourceDirName:"networking/packets",slug:"/networking/packets/lift-import-creation",permalink:"/docs/networking/packets/lift-import-creation",draft:!1,editUrl:"https://pr.new/github.com/Scrap-Mods/docs/blob/main/docs/networking/packets/45-lift-import-creation.mdx",tags:[],version:"current",sidebarPosition:45,frontMatter:{title:"45 - Lift Import Creation"},sidebar:"networkingSidebar",previous:{title:"44 - Connect",permalink:"/docs/networking/packets/connect"},next:{title:"50 - Interact WIP",permalink:"/docs/networking/packets/interact"}},p={},s=[{value:"Structure",id:"structure",level:2}],c={toc:s},m="wrapper";function u(t){let{components:e,...n}=t;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"lift-import-creation"},"Lift Import Creation"),(0,a.kt)("p",null,"This packet is sent when the player imports a creation from the lift."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"ID"),": 0x2D (45)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Size"),": Variable"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"LZ4 Compressed"),": Yes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"State"),": Playing"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Bound To"),": Client -> Server")),(0,a.kt)("h2",{id:"structure"},"Structure"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Offset"),(0,a.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Field Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0x00"),(0,a.kt)("td",{parentName:"tr",align:null},"Lift ID"),(0,a.kt)("td",{parentName:"tr",align:null},"be u32"),(0,a.kt)("td",{parentName:"tr",align:null},"The ID of the lift to import the creation on.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0x04"),(0,a.kt)("td",{parentName:"tr",align:null},"Uncompressed Size"),(0,a.kt)("td",{parentName:"tr",align:null},"be u32"),(0,a.kt)("td",{parentName:"tr",align:null},"The size of the blueprint data before it is compressed with LZ4.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0x08"),(0,a.kt)("td",{parentName:"tr",align:null},"Compressed Size"),(0,a.kt)("td",{parentName:"tr",align:null},"be u32"),(0,a.kt)("td",{parentName:"tr",align:null},"The size of the blueprint data after it is compressed with LZ4.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0x14"),(0,a.kt)("td",{parentName:"tr",align:null},"Compressed Blueprint Data"),(0,a.kt)("td",{parentName:"tr",align:null},"LZ4 compressed bytes"),(0,a.kt)("td",{parentName:"tr",align:null},"The contents of the ",(0,a.kt)("inlineCode",{parentName:"td"},"blueprint.json")," file, compressed with LZ4 block compression.")))),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The blueprint data can be decompressed using the ",(0,a.kt)("inlineCode",{parentName:"p"},"lz4_decompress_safe")," function from the LZ4 ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lz4/lz4"},"C API"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"lz4.block.decompress")," function from ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/python-lz4/python-lz4"},"python-lz4")," can also be used by providing the ",(0,a.kt)("inlineCode",{parentName:"p"},"uncompressed_size")," argument. Without this argument, decompressing the blueprint data will fail.")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"When compressing the blueprint data, ensure the used LZ4 library does not prepend the ",(0,a.kt)("inlineCode",{parentName:"p"},"Compressed Blueprint Data")," field with the compressed size.")))}u.isMDXComponent=!0}}]);