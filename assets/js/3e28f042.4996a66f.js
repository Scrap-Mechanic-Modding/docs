"use strict";(self.webpackChunksm_docs=self.webpackChunksm_docs||[]).push([[8843],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>h});var i=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,i,a=function(t,e){if(null==t)return{};var n,i,a={},r=Object.keys(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(i=0;i<r.length;i++)n=r[i],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var c=i.createContext({}),s=function(t){var e=i.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},d=function(t){var e=s(t.components);return i.createElement(c.Provider,{value:e},t.children)},p="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return i.createElement(i.Fragment,{},e)}},k=i.forwardRef((function(t,e){var n=t.components,a=t.mdxType,r=t.originalType,c=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),p=s(n),k=a,h=p["".concat(c,".").concat(k)]||p[k]||u[k]||r;return n?i.createElement(h,l(l({ref:e},d),{},{components:n})):i.createElement(h,l({ref:e},d))}));function h(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var r=n.length,l=new Array(r);l[0]=k;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=t,o[p]="string"==typeof t?t:a,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}k.displayName="MDXCreateElement"},840:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const r={title:"44 - Connect"},l="Connect",o={unversionedId:"networking/packets/connect",id:"networking/packets/connect",title:"44 - Connect",description:"This packet is sent when the player changes a connection between two connection points with the connect tool.",source:"@site/docs/networking/packets/44-connect.mdx",sourceDirName:"networking/packets",slug:"/networking/packets/connect",permalink:"/docs/networking/packets/connect",draft:!1,editUrl:"https://pr.new/github.com/Scrap-Mechanic-Modding/Scrap-Mechanic-Modding.github.io/blob/main/docs/networking/packets/44-connect.mdx",tags:[],version:"current",sidebarPosition:44,frontMatter:{title:"44 - Connect"},sidebar:"networkingSidebar",previous:{title:"43 - Lift Delete Creation",permalink:"/docs/networking/packets/lift-delete-creation"},next:{title:"45 - Lift Import Creation",permalink:"/docs/networking/packets/lift-import-creation"}},c={},s=[{value:"Structure",id:"structure",level:2},{value:"Flags bitfield",id:"flags-bitfield",level:3},{value:"Interaction type",id:"interaction-type",level:4},{value:"Child connection type",id:"child-connection-type",level:4},{value:"Validation",id:"validation",level:2}],d={toc:s},p="wrapper";function u(t){let{components:e,...n}=t;return(0,a.kt)(p,(0,i.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"connect"},"Connect"),(0,a.kt)("p",null,"This packet is sent when the player changes a connection between two connection points with the connect tool."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"ID"),": 0x2C (44)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Size"),": 9 bytes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"LZ4 Compressed"),": Yes"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"State"),": Playing"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Bound To"),": Client -> Server")),(0,a.kt)("h2",{id:"structure"},"Structure"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Offset"),(0,a.kt)("th",{parentName:"tr",align:null},"Field Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Field Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0x00"),(0,a.kt)("td",{parentName:"tr",align:null},"Child ID"),(0,a.kt)("td",{parentName:"tr",align:null},"be u32"),(0,a.kt)("td",{parentName:"tr",align:null},"The ID of the interactable or bearing the connection is made to.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0x04"),(0,a.kt)("td",{parentName:"tr",align:null},"Parent ID"),(0,a.kt)("td",{parentName:"tr",align:null},"be u32"),(0,a.kt)("td",{parentName:"tr",align:null},"The ID of the interactable the connection is made from.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"0x08"),(0,a.kt)("td",{parentName:"tr",align:null},"Flags"),(0,a.kt)("td",{parentName:"tr",align:null},"u8 bitfield"),(0,a.kt)("td",{parentName:"tr",align:null},"The bitfield denoting what type of interaction was made with the connection. See ",(0,a.kt)("a",{parentName:"td",href:"#flags-bitfield"},"Flags bitfield"),".")))),(0,a.kt)("h3",{id:"flags-bitfield"},"Flags bitfield"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"These two tables document bitfields of the same byte.")),(0,a.kt)("h4",{id:"interaction-type"},"Interaction type"),(0,a.kt)("table",null,(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"Bits"),(0,a.kt)("th",null,"Field name"),(0,a.kt)("th",null,"Notes"))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,"7"),(0,a.kt)("td",null,"Unused"),(0,a.kt)("td",null)),(0,a.kt)("tr",null,(0,a.kt)("td",null,"6"),(0,a.kt)("td",null,"Reverse Direction"),(0,a.kt)("td",null,"Setting this field reverses the direction the bearing spins in, if it exists.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"5"),(0,a.kt)("td",null,"Disconnect"),(0,a.kt)("td",null,"Setting this field destroys the connection between the parent and the child, if it exists.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"4"),(0,a.kt)("td",null,"Connect"),(0,a.kt)("td",null,"Setting this field creates a connection between the parent and the child, if it does not exist.")))),(0,a.kt)("p",null,"Setting both the ",(0,a.kt)("inlineCode",{parentName:"p"},"Connect")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"Disconnect")," bits causes the connection to toggle."),(0,a.kt)("p",null,"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"Reverse Direction")," bit is set, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Connect")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Disconnect")," bits are ignored. For parts this means the connection cannot be modified if the ",(0,a.kt)("inlineCode",{parentName:"p"},"Reverse Direction")," is set, while for bearings the direction is always reversed, regardless of the values of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Connect")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Disconnect")," bits."),(0,a.kt)("p",null,"If no bits are set, nothing happens."),(0,a.kt)("h4",{id:"child-connection-type"},"Child connection type"),(0,a.kt)("table",null,(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("th",null,"Bits"),(0,a.kt)("th",null,"Field name"),(0,a.kt)("th",null,"Notes"))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",null,"3"),(0,a.kt)("td",{rowspan:"2"},"Unused"),(0,a.kt)("td",{rowspan:"2"})),(0,a.kt)("tr",null,(0,a.kt)("td",null,"2")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"1"),(0,a.kt)("td",null,"Bearing"),(0,a.kt)("td",null,"Set this bit to connect a part to a bearing.")),(0,a.kt)("tr",null,(0,a.kt)("td",null,"0"),(0,a.kt)("td",null,"Standard"),(0,a.kt)("td",null,(0,a.kt)("p",null,"Set this bit to connect two parts or a part to a piston."),"If this bit it set, the ",(0,a.kt)("code",null,"Bearing")," bit is ignored.")))),(0,a.kt)("p",null,"If no bits are set, nothing happens."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"If the ",(0,a.kt)("inlineCode",{parentName:"p"},"Bearing")," bit is set, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Part")," bit is not set, and the child of the connection is not a bearing, the game will crash!")),(0,a.kt)("h2",{id:"validation"},"Validation"),(0,a.kt)("p",null,"If either the parent or child do not exist, nothing happens."),(0,a.kt)("p",null,"If the parent is a scripted part and the child is a bearing, the server does not validate if connecting parent and child is allowed. The connection will be made or destroyed, regardless of the scripted part's ",(0,a.kt)("inlineCode",{parentName:"p"},"connectionOutput")," value."),(0,a.kt)("p",null,"If the child is a bearing, the server does not validate if the child does not already have a parent. This allows for connecting multiple parents to a single bearing. This can be achieved through blueprint editing as well and is persistent through reloads."))}u.isMDXComponent=!0}}]);